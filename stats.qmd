---
title: Notebook for Statistics
jupyter: python3
format: 
    html: 
        code-fold: False
        toc: True
        toc-location: left
---


# About
This notebook is for me to record my notes in learning statistics. It includes specific math formulas, examples and how to calculate them in Python. Some notes are directly copied from various different sources. 

# Conditional Probability

## Bayes' theorem

Bayes's theorem provides a way to update the probability of an event based on new information about the event. 

In Bayesian statistics, prior probability refers to the probability of an event before new data is collected. Posterior probability is the updated probability of an event based on new data. Posterior means occurring after. 

$$P(A \mid B) = \frac{ P(B \mid A) * P(A) }{ P(B) }$$

Event A = Rain
<br>
Event B = Cloudy

Now we are trying to get the probaility of A given event B. 
<br>
This means the probability of rain, given it's cloudy. 

This is also called posterior probability. 

$$P(Rain \mid Cloud) = \frac{ P(Cloud \mid Rain) * P(Rain) }{ P(Cloudy) }$$

Let's say below are the probability of each event: 

- Overall chance of rain = 10%
- All days start off cloudy = 40%
- Rainy days start of cloudy (P(Cloud|Rain)) = 50%

$$P(Rain \mid Cloud) = \frac{ 50\% * 10\% }{ 40\% }$$

```{python}
p_a_b = 0.5*0.1/0.4

print(p_a_b)
```

$$P(Rain \mid Cloud) = 12.5%$$

## Bayes' theorem - expaned version

Sometimes you don't know the probability of event B, which is in the denominator of the equation for the basic Bayes' theorem. In that case, you can use the expanded version of Bayes' theorem, because you don't need to know the probability of event B to use the expanded version. 

$$P(A \mid B) = \frac{P(B \mid A) * P(A)} {P(B \mid A) * P(A) + P(B \mid not A) * P(not A)}$$

Let's say we are conducting test for a medical condition. Below are the related probability: 

|Condition                   |Probability|Variable |
|----------------------------|-----------|---------|
|Having the medical condition|1%         |P(A)     |
|Test positive|unknown|P(B)|
|Given test is positive, has the medical condition|95%|P(B \| A)|
|Given test is positive, doesn't have the medical condition|2%|P(B \| not A)|
|Does not have the medical condition|99%|1-P(A)|

: Example: medical condition and test result

<br>

Now we are trying to find the probability of the person actually having the medical condition, given the test is positive. 

This would be P(A \| B). 

We cannot use the basic Bayes' theorem as the P(B) is unknown. This is when we need the expaned version. 

Putting all available variables into the formula will look like this: 
$$
P(A \mid B) = \frac{0.95 \times 0.01}{(0.95 \times 0.01) + (0.02 \times 0.99)}
$$


```{python}
P_A_B = 0.95 * 0.01 / (0.95*0.01 + 0.02 * 0.99)
print(P_A_B)
```

$$P(A \mid B) = 32.4%$$

## Case study - calculate churn rate for a customer type with Bayes' theorem (or something simplier)

Suppose you want to calculate the churn rate of a specific type of customer, e.g. UK customer. 

Given you know the number of customer that are in UK, and the number of churned customer in UK, you can easily calculate their churn rate. 

Below is a simple data set: 

|Type|Number of customer|
|------------------------------|-----------|
|Total number of customer      |100        |
|Number of churned customer    |60         |
|Number of UK customer         |50         |
|Number of churned UK customer |30         |

:Sample data: total number of customer and churned customer

$$\text{Churn rate of UK customer} = \frac{\text{Number of churned UK customer}} {\text{Number of UK customer}}$$

$$\text{Churn rate of UK customer}  = \frac{30} {50}$$

```{python}
churn_rate = 30/50
print(f'Churn rate of UK customer: {churn_rate}')
```

Now look at the Bayes' theorem
$$P(A \mid B) = \frac{ P(B \mid A) * P(A) }{ P(B) }$$

Put the numbers into the equation
$$ \text{Event A} = \text{Churn rate by all customer}$$
$$ \text{Event B} = \text{Percentage of UK customer}$$

$$
P(A \mid B) = \frac{\frac{30}{60} \times \frac{60}{100}}{\frac{50}{100}}
$$

$$P(A \mid B) = \frac{30}{60} * \frac{60}{100} * \frac{100}{50}$$
$$P(A \mid B) = \frac{30}{50}$$


```{python}
print(f'P(B|A) = {30/50}')
```

They both return the same result. 

When we know enough variables, it is sufficient for us to directly calculate the churn rate. However when we don't have enough data, or when the scenario is new, we may need to apply the Bayes' theorem to get the value we need. 

# Discrete Probability Distribution
## Binomial distribtuion

Binomial distribution referes to the calculation of the probability of k out of n ways. 

Let's say we know in a coin toss, there is a 50% chance for it to be a head or a tail. If we toss it for 10 times, what is the probability that we get 5 heads? We can use binomial distribution to calculate the value. 

Note that to use binomial distribution, the two results must be mutually exclusive. Like in a coin toss, there can only be a head or toss. 

Or in a roll of die, you either get a 3 or not get a 3. 

This is how we calculate the binomial distribution: 

$$P(x=k) = \frac{n!} {k!(n-k)!} * p^k (1-p)^{n-k}$$

The meaning of each variables: 
$$k = \text{number of success}$$

$$n = \text{number of trials}$$

$$p = \text{probability of success on a given trial}$$

We can break this down into 2 parts. 

### n-choose-k

$$\frac{n!} {k!(n-k)!}$$

This is known as n-choose-k, which refers to the number of outcome we want, or the number of success we can get at the given number of trials. 

Say you want to know out of 3 coin toss, the number of outcomes where you can get 2 heads. 

The formula would be: 

$$\text{n-choose-k}=\frac{3!} {2!(3-2)!}$$
$$\text{n-choose-k}=\frac{3*2*1} {2*1*1}$$



```{python}
n_choose_k = 3*2*1/2*1*1

print(f'n-choose-k = {n_choose_k}')
```

### Probability of each outcome
Now that we know what is the number of outcomes we can get 2 heads, we need to know the probability of each outcome as well, which will allow us to calculate the probability of x=k. 

$$p^k(1-p)^{n-k}$$

Now we know the chances of getting a head in each toss is 50%

Put it into work, it would be: 
$$0.5^2(1-0.5)^{3-2}$$

$$=0.5*0.5*0.5$$

```{python}
prob_of_each_outcome = 0.5* 0.5 * (1-0.5)

print(f'Probability of each outcome = {prob_of_each_outcome}')
```

In cases like a coin toss, where you know the chance is 50%, there is also an easier way to get the probability of each outcome. 

Say for each coin toss, you can get 2 possible outcomes. For 2 coin toss, you get 2^2, which is 4 outcome. 

Now for 3 coin toss, you will get the total possible outcome of 2^3, which is 8. 

The probability of getting each outcome is 1/8, which is also 0.125. 

```{python}
print(f'total number of possible outcome = {2**3}')
print(f'proabbility of each outcome = {1/2**3}')
```

### Final outcome
Now that we can put the two together. 

$$p(x=k) = n-choose-k * \text{probability of each outcome}$$
$$p(x=k) = 3*0.125$$


```{python}
binomial_dist = 3*0.125
print(f'p(x=k) = {binomial_dist}')
```

### Case study: chances of customer make a return to a store